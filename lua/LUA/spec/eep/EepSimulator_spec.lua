describe("EepFunktionen.lua", function()
    insulate("EEPVer", function()
        require("ak.core.eep.AkEepFunktionen")
        it("EEPVer has value \"15\"", function() assert.are.equals(15, EEPVer) end)
    end)

    insulate("clearlog", function()
        require("ak.core.eep.AkEepFunktionen")
        it("clearlog() works ", function() clearlog() end)
    end)

    insulate("EEPSetSignal", function()
        require("ak.core.eep.AkEepFunktionen")
        describe("setzt Signal 2 auf Stellung 4", function()
            EEPSetSignal(2, 4, 1)
            it("gibt 4 zurück bei EEPGetSignal(2)", function() assert.are.equals(4, EEPGetSignal(2)) end)
        end)

        describe("setzt Signal 2 auf Stellung 3", function()
            EEPSetSignal(2, 3, 1)
            it("gibt 4 zurück bei EEPGetSignal(3)", function() assert.are.equals(3, EEPGetSignal(2)) end)
        end)
    end)

    describe("Simulating signals on train", function()
        insulate("single train in queue", function()
            local EEPSimulator = require("ak.core.eep.AkEepFunktionen")
            EEPSimulator.queueTrainOnSignal(54, "#train1")

            it("no one waits on signal 53", function() assert.equals(0, EEPGetSignalTrainsCount(53)) end)
            it("only train1 waits on signal 54", function()
                assert.equals(1, EEPGetSignalTrainsCount(54))
                assert.equals("#train1", EEPGetSignalTrainName(54, 1))
            end)
        end)

        insulate("two trains in queue", function()
            local EEPSimulator = require("ak.core.eep.AkEepFunktionen")
            EEPSimulator.queueTrainOnSignal(54, "#train1")
            EEPSimulator.queueTrainOnSignal(54, "#train2")

            it("train1 and train2 wait on signal 54", function()
                assert.equals(2, EEPGetSignalTrainsCount(54))
                assert.equals("#train1", EEPGetSignalTrainName(54, 1))
                assert.equals("#train2", EEPGetSignalTrainName(54, 2))
            end)
        end)

        insulate("second train moves up, if first train leaves", function()
            local EEPSimulator = require("ak.core.eep.AkEepFunktionen")
            EEPSimulator.queueTrainOnSignal(54, "#train1")
            EEPSimulator.queueTrainOnSignal(54, "#train2")
            EEPSimulator.removeTrainFromSignal(54, "#train1")

            it("only train2 waits on signal 54", function()
                assert.equals(1, EEPGetSignalTrainsCount(54))
                assert.equals("#train2", EEPGetSignalTrainName(54, 1))
            end)
        end)

        insulate("all trains are removed correctly", function()
            local EEPSimulator = require("ak.core.eep.AkEepFunktionen")
            EEPSimulator.queueTrainOnSignal(54, "#train1")
            EEPSimulator.queueTrainOnSignal(54, "#train2")
            EEPSimulator.removeAllTrainFromSignal(54)

            it("no waits on signal 54", function() assert.equals(0, EEPGetSignalTrainsCount(54)) end)
        end)
    end)
end)

