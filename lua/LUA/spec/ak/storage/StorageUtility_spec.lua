describe("ak.storage.StorageUtility", function()
    insulate("can be loaded with debug off", function()
        require("ak.core.eep.EepSimulator")
        EEPSaveData(1, true)
        EEPSaveData(2, false)
        EEPSaveData(3, "true")
        EEPSaveData(4, "false")
        EEPSaveData(5, 5)
        EEPSaveData(6, 6)
        EEPSaveData(7, "5")
        EEPSaveData(8, "6")
        local StorageUtility = require("ak.storage.StorageUtility")
        it("Debug is off", function() assert.is_false(StorageUtility.debug) end)
    end)
    insulate("boolean true is stored as 1", function()
        require("ak.core.eep.EepSimulator")
        EEPSaveData(1, true)
        local StorageUtility = require("ak.storage.StorageUtility")
        it("calculateEepLuaData()",
           function() assert.equals("[EEPLuaData]\nDB_1 = 1\n", StorageUtility.calcEepLuaData()) end)
    end)
    insulate("boolean false is stored as 0", function()
        require("ak.core.eep.EepSimulator")
        EEPSaveData(2, false)
        local StorageUtility = require("ak.storage.StorageUtility")
        it("calculateEepLuaData()",
           function() assert.equals("[EEPLuaData]\nDB_2 = 0\n", StorageUtility.calcEepLuaData()) end)
    end)
    insulate("string true is stored as true", function()
        require("ak.core.eep.EepSimulator")
        EEPSaveData(3, "true")
        local StorageUtility = require("ak.storage.StorageUtility")
        it("calculateEepLuaData()",
           function() assert.equals("[EEPLuaData]\nDS_3 = \"true\"\n", StorageUtility.calcEepLuaData()) end)
    end)
    insulate("number 5 is stored as 5.000000", function()
        require("ak.core.eep.EepSimulator")
        EEPSaveData(5, 5)
        local StorageUtility = require("ak.storage.StorageUtility")
        it("calculateEepLuaData()",
           function() assert.equals("[EEPLuaData]\nDN_5 = 5.000000\n", StorageUtility.calcEepLuaData()) end)
    end)
end)
