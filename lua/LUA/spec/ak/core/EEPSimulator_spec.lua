describe("EepFunktionen.lua", function()
    insulate("EEPSave/Load", function()
        require("ak.core.eep.EepSimulator")

        local ok1 = EEPSaveData(1, true)
        local ok2 = EEPSaveData(2, false)
        it("Could save true", function() assert.is_true(ok1) end)
        it("Could save false", function() assert.is_true(ok2) end)

        local loadOk1, val1 = EEPLoadData(1)
        local loadOk2, val2 = EEPLoadData(2)
        it("Could load 1", function() assert.is_true(loadOk1) end)
        it("Correct val 1", function() assert.is_true(val1) end)
        it("Could load 2", function() assert.is_true(loadOk2) end)
        it("Correct val 2", function() assert.is_false(val2) end)
    end)

    insulate("Trains", function()
        local EepSimulator = require("ak.core.eep.EepSimulator")

        local countInitial = EEPGetRollingstockItemsCount("#Train1")
        it("", function() assert.equals(0, countInitial) end)

        EepSimulator.addTrain("#Train1", "RollingStock 1", "RollingStock 2")
        local countAfterInsert = EEPGetRollingstockItemsCount("#Train1")
        it("", function() assert.equals(2, countAfterInsert) end)

        EepSimulator.splitTrain("#Train1", 1)
        local countAfterSplit = EEPGetRollingstockItemsCount("#Train1")
        it("", function() assert.equals(1, countAfterSplit) end)
    end)

    insulate("EEPStructureSetLight", function()
        require("ak.core.eep.EepSimulator")
        it("", function() assert.equals("#1234", string.gsub("#1234", "(#%d*).*", "%1")) end)
        it("", function() assert.equals("#1234", string.gsub("#1234_SomeImmoModel", "(#%d*).*", "%1")) end)
        it("", function() assert.equals("#123", string.gsub("#123_", "(#%d*).*", "%1")) end)

        EEPStructureSetLight("#14", true)
        local _, on = EEPStructureGetLight("#14")
        it("on", function() assert.is_true(on) end)
        EEPStructureSetLight("#14", false)
        local _, off = EEPStructureGetLight("#14")
        it("off", function() assert.is_false(off) end)

        local _, off2 = EEPStructureGetLight("#15")
        it("off unknown", function() assert.is_false(off2) end)
    end)
    insulate("EEPVer", function()
        require("ak.core.eep.EepSimulator")
        it("EEPVer has value \"15\"", function() assert.are.equals(16.3, EEPVer) end)
    end)

    insulate("clearlog", function()
        require("ak.core.eep.EepSimulator")
        it("clearlog() works ", function() clearlog() end)
    end)

    insulate("EEPSetSignal", function()
        require("ak.core.eep.EepSimulator")
        describe("setzt Signal 2 auf Stellung 4", function()
            EEPSetSignal(2, 4, 1)
            it("gibt 4 zurück bei EEPGetSignal(2)", function() assert.are.equals(4, EEPGetSignal(2)) end)
        end)

        describe("setzt Signal 2 auf Stellung 3", function()
            EEPSetSignal(2, 3, 1)
            it("gibt 4 zurück bei EEPGetSignal(3)", function() assert.are.equals(3, EEPGetSignal(2)) end)
        end)
    end)

    describe("EEPGetSignalTrainsCount / EEPGetSignalTrainName - Simulating signals on train", function()
        insulate("single train in queue", function()
            local EEPSimulator = require("ak.core.eep.EepSimulator")
            EEPSimulator.queueTrainOnSignal(51, "#train1-A")

            it("no one waits on signal 50", function() assert.equals(0, EEPGetSignalTrainsCount(50)) end)
            it("only train1 waits on signal 51", function()
                assert.equals(1, EEPGetSignalTrainsCount(51))
                assert.equals("#train1-A", EEPGetSignalTrainName(51, 1))
            end)
        end)

        insulate("two trains in queue", function()
            local EEPSimulator = require("ak.core.eep.EepSimulator")
            EEPSimulator.queueTrainOnSignal(52, "#train1-B")
            EEPSimulator.queueTrainOnSignal(52, "#train2-B")

            it("train1 and train2 wait on signal 52", function()
                assert.equals(2, EEPGetSignalTrainsCount(52))
            end)
            it("train1 and train2 wait on signal 52",
               function() assert.equals("#train1-B", EEPGetSignalTrainName(52, 1)) end)
            it("train1 and train2 wait on signal 52",
               function() assert.equals("#train2-B", EEPGetSignalTrainName(52, 2)) end)
        end)

        insulate("second train moves up, if first train leaves", function()
            local EEPSimulator = require("ak.core.eep.EepSimulator")
            EEPSimulator.queueTrainOnSignal(53, "#train1")
            EEPSimulator.queueTrainOnSignal(53, "#train2")
            EEPSimulator.removeTrainFromSignal(53, "#train1")

            it("only train2 waits on signal 53", function()
                assert.equals(1, EEPGetSignalTrainsCount(53))
                assert.equals("#train2", EEPGetSignalTrainName(53, 1))
            end)
        end)

        insulate("all trains are removed correctly", function()
            local EEPSimulator = require("ak.core.eep.EepSimulator")
            EEPSimulator.queueTrainOnSignal(54, "#train1")
            EEPSimulator.queueTrainOnSignal(54, "#train2")
            EEPSimulator.removeAllTrainFromSignal(54)

            it("no waits on signal 54", function() assert.equals(0, EEPGetSignalTrainsCount(54)) end)
        end)
    end)
end)
