swagger: '2.0'
info:
  description: EEP-Web ist eine API fÃ¼r JSON
  version: 0.0.1
  title: EEP-Web
host: 'localhost:3200'
basePath: /
tags:
  - name: eep-raw
    description: 'Alles, was Lua von EEP kennst.'
  - name: eep-ak
    description: Die Konfigurationsdaten von Andreas Kreuz
schemes:
  - https
  - http
# region Server-API
paths:
  /eep-raw:
    post:
      tags:
        - pet
      #      summary: Add a new pet to the store
      #      description: ''
      #      operationId: addPet
      #      consumes:
      #      - application/json
      #      - application/xml
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - in: body
      #        name: body
      #        description: Pet object that needs to be added to the store
      #        required: true
      #        schema:
      #          $ref: '#/definitions/Pet'
      #      responses:
      #        '405':
      #          description: Invalid input
      #      security:
      #      - petstore_auth:
      #        - 'write:pets'
      #        - 'read:pets'
      #    put:
      #      tags:
      #      - pet
      #      summary: Update an existing pet
      #      description: ''
      #      operationId: updatePet
      #      consumes:
      #      - application/json
      #      - application/xml
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - in: body
      #        name: body
      #        description: Pet object that needs to be added to the store
      #        required: true
      #        schema:
      #          $ref: '#/definitions/Pet'
      #      responses:
      #        '400':
      #          description: Invalid ID supplied
      #        '404':
      #          description: Pet not found
      #        '405':
      #          description: Validation exception
      #      security:
      #      - petstore_auth:
      #        - 'write:pets'
      #        - 'read:pets'
      #  /pet/findByStatus:
      #    get:
      #      tags:
      #      - pet
      #      summary: Finds Pets by status
      #      description: Multiple status values can be provided with comma separated strings
      #      operationId: findPetsByStatus
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: status
      #        in: query
      #        description: Status values that need to be considered for filter
      #        required: true
      #        type: array
      #        items:
      #          type: string
      #          enum:
      #          - available
      #          - pending
      #          - sold
      #          default: available
      #        collectionFormat: multi
      #      responses:
      #        '200':
      #          description: successful operation
      #          schema:
      #            type: array
      #            items:
      #              $ref: '#/definitions/Pet'
      #        '400':
      #          description: Invalid status value
      #      security:
      #      - petstore_auth:
      #        - 'write:pets'
      #        - 'read:pets'
      #  /pet/findByTags:
      #    get:
      #      tags:
      #      - pet
      #      summary: Finds Pets by tags
      #      description: >-
      #        Muliple tags can be provided with comma separated strings. Use
      #        tag1, tag2, tag3 for testing.
      #      operationId: findPetsByTags
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: tags
      #        in: query
      #        description: Tags to filter by
      #        required: true
      #        type: array
      #        items:
      #          type: string
      #        collectionFormat: multi
      #      responses:
      #        '200':
      #          description: successful operation
      #          schema:
      #            type: array
      #            items:
      #              $ref: '#/definitions/Pet'
      #        '400':
      #          description: Invalid tag value
      #      security:
      #      - petstore_auth:
      #        - 'write:pets'
      #        - 'read:pets'
      #      deprecated: true
      #  '/pet/{petId}':
      #    get:
      #      tags:
      #      - pet
      #      summary: Find pet by ID
      #      description: Returns a single pet
      #      operationId: getPetById
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: petId
      #        in: path
      #        description: ID of pet to return
      #        required: true
      #        type: integer
      #        format: int64
      #      responses:
      #        '200':
      #          description: successful operation
      #          schema:
      #            $ref: '#/definitions/Pet'
      #        '400':
      #          description: Invalid ID supplied
      #        '404':
      #          description: Pet not found
      #      security:
      #      - api_key: []
      #    post:
      #      tags:
      #      - pet
      #      summary: Updates a pet in the store with form data
      #      description: ''
      #      operationId: updatePetWithForm
      #      consumes:
      #      - application/x-www-form-urlencoded
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: petId
      #        in: path
      #        description: ID of pet that needs to be updated
      #        required: true
      #        type: integer
      #        format: int64
      #      - name: name
      #        in: formData
      #        description: Updated name of the pet
      #        required: false
      #        type: string
      #      - name: status
      #        in: formData
      #        description: Updated status of the pet
      #        required: false
      #        type: string
      #      responses:
      #        '405':
      #          description: Invalid input
      #      security:
      #      - petstore_auth:
      #        - 'write:pets'
      #        - 'read:pets'
      #    delete:
      #      tags:
      #      - pet
      #      summary: Deletes a pet
      #      description: ''
      #      operationId: deletePet
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: api_key
      #        in: header
      #        required: false
      #        type: string
      #      - name: petId
      #        in: path
      #        description: Pet id to delete
      #        required: true
      #        type: integer
      #        format: int64
      #      responses:
      #        '400':
      #          description: Invalid ID supplied
      #        '404':
      #          description: Pet not found
      #      security:
      #      - petstore_auth:
      #        - 'write:pets'
      #        - 'read:pets'
      #  '/pet/{petId}/uploadImage':
      #    post:
      #      tags:
      #      - pet
      #      summary: uploads an image
      #      description: ''
      #      operationId: uploadFile
      #      consumes:
      #      - multipart/form-data
      #      produces:
      #      - application/json
      #      parameters:
      #      - name: petId
      #        in: path
      #        description: ID of pet to update
      #        required: true
      #        type: integer
      #        format: int64
      #      - name: additionalMetadata
      #        in: formData
      #        description: Additional data to pass to server
      #        required: false
      #        type: string
      #      - name: file
      #        in: formData
      #        description: file to upload
      #        required: false
      #        type: file
      #      responses:
      #        '200':
      #          description: successful operation
      #          schema:
      #            $ref: '#/definitions/ApiResponse'
      #      security:
      #      - petstore_auth:
      #        - 'write:pets'
      #        - 'read:pets'
      #  /store/inventory:
      #    get:
      #      tags:
      #      - store
      #      summary: Returns pet inventories by status
      #      description: Returns a map of status codes to quantities
      #      operationId: getInventory
      #      produces:
      #      - application/json
      #      parameters: []
      #      responses:
      #        '200':
      #          description: successful operation
      #          schema:
      #            type: object
      #            additionalProperties:
      #              type: integer
      #              format: int32
      #      security:
      #      - api_key: []
      #  /store/order:
      #    post:
      #      tags:
      #      - store
      #      summary: Place an order for a pet
      #      description: ''
      #      operationId: placeOrder
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - in: body
      #        name: body
      #        description: order placed for purchasing the pet
      #        required: true
      #        schema:
      #          $ref: '#/definitions/Order'
      #      responses:
      #        '200':
      #          description: successful operation
      #          schema:
      #            $ref: '#/definitions/Order'
      #        '400':
      #          description: Invalid Order
      #  '/store/order/{orderId}':
      #    get:
      #      tags:
      #      - store
      #      summary: Find purchase order by ID
      #      description: >-
      #        For valid response try integer IDs with value >= 1 and <= 10.
      #        Other values will generated exceptions
      #      operationId: getOrderById
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: orderId
      #        in: path
      #        description: ID of pet that needs to be fetched
      #        required: true
      #        type: integer
      #        maximum: 10
      #        minimum: 1
      #        format: int64
      #      responses:
      #        '200':
      #          description: successful operation
      #          schema:
      #            $ref: '#/definitions/Order'
      #        '400':
      #          description: Invalid ID supplied
      #        '404':
      #          description: Order not found
      #    delete:
      #      tags:
      #      - store
      #      summary: Delete purchase order by ID
      #      description: >-
      #        For valid response try integer IDs with positive integer value.
      #        Negative or non-integer values will generate API errors
      #      operationId: deleteOrder
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: orderId
      #        in: path
      #        description: ID of the order that needs to be deleted
      #        required: true
      #        type: integer
      #        minimum: 1
      #        format: int64
      #      responses:
      #        '400':
      #          description: Invalid ID supplied
      #        '404':
      #          description: Order not found
      #  /user:
      #    post:
      #      tags:
      #      - user
      #      summary: Create user
      #      description: This can only be done by the logged in user.
      #      operationId: createUser
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - in: body
      #        name: body
      #        description: Created user object
      #        required: true
      #        schema:
      #          $ref: '#/definitions/User'
      #      responses:
      #        default:
      #          description: successful operation
      #  /user/createWithArray:
      #    post:
      #      tags:
      #      - user
      #      summary: Creates list of users with given input array
      #      description: ''
      #      operationId: createUsersWithArrayInput
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - in: body
      #        name: body
      #        description: List of user object
      #        required: true
      #        schema:
      #          type: array
      #          items:
      #            $ref: '#/definitions/User'
      #      responses:
      #        default:
      #          description: successful operation
      #  /user/createWithList:
      #    post:
      #      tags:
      #      - user
      #      summary: Creates list of users with given input array
      #      description: ''
      #      operationId: createUsersWithListInput
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - in: body
      #        name: body
      #        description: List of user object
      #        required: true
      #        schema:
      #          type: array
      #          items:
      #            $ref: '#/definitions/User'
      #      responses:
      #        default:
      #          description: successful operation
      #  /user/login:
      #    get:
      #      tags:
      #      - user
      #      summary: Logs user into the system
      #      description: ''
      #      operationId: loginUser
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: username
      #        in: query
      #        description: The user name for login
      #        required: true
      #        type: string
      #      - name: password
      #        in: query
      #        description: The password for login in clear text
      #        required: true
      #        type: string
      #      responses:
      #        '200':
      #          description: successful operation
      #          schema:
      #            type: string
      #          headers:
      #            X-Rate-Limit:
      #              type: integer
      #              format: int32
      #              description: calls per hour allowed by the user
      #            X-Expires-After:
      #              type: string
      #              format: date-time
      #              description: date in UTC when token expires
      #        '400':
      #          description: Invalid username/password supplied
      #  /user/logout:
      #    get:
      #      tags:
      #      - user
      #      summary: Logs out current logged in user session
      #      description: ''
      #      operationId: logoutUser
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters: []
      #      responses:
      #        default:
      #          description: successful operation
      #  '/user/{username}':
      #    get:
      #      tags:
      #      - user
      #      summary: Get user by user name
      #      description: ''
      #      operationId: getUserByName
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: username
      #        in: path
      #        description: 'The name that needs to be fetched. Use user1 for testing. '
      #        required: true
      #        type: string
      #      responses:
      #        '200':
      #          description: successful operation
      #          schema:
      #            $ref: '#/definitions/User'
      #        '400':
      #          description: Invalid username supplied
      #        '404':
      #          description: User not found
      #    put:
      #      tags:
      #      - user
      #      summary: Updated user
      #      description: This can only be done by the logged in user.
      #      operationId: updateUser
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: username
      #        in: path
      #        description: name that need to be updated
      #        required: true
      #        type: string
      #      - in: body
      #        name: body
      #        description: Updated user object
      #        required: true
      #        schema:
      #          $ref: '#/definitions/User'
      #      responses:
      #        '400':
      #          description: Invalid user supplied
      #        '404':
      #          description: User not found
      #    delete:
      #      tags:
      #      - user
      #      summary: Delete user
      #      description: This can only be done by the logged in user.
      #      operationId: deleteUser
      #      produces:
      #      - application/xml
      #      - application/json
      #      parameters:
      #      - name: username
      #        in: path
      #        description: The name that needs to be deleted
      #        required: true
      #        type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
# endregion
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  AkDirection:
    type: string
    enum:
      - left
      - straight
      - right
  AkTrackType:
    type: string
    enum:
      - road
      - rail
      - tram
      - auxiliary
      - camera
  AkTrafficType:
    type: string
    enum:
      - cars
      - trams
      - trains
      - cyclists
      - pedestrians
  AkRoadSignalPhase:
    type: string
    enum:
      - red
      - red-yellow
      - yellow
      - green
      - pedestrians
  AkLaneSwitchingType:
    type: string
    enum:
      - unused
      - traffic
      - request
      - pedestrian
  AkIntersection:
    type: object
    properties:
      id:
        type: string
        description: ID der Kreuzung (K1)
      name:
        type: string
      switchings:
        type: array
        items:
          $ref: '#/definitions/AkIntersectionSwitching'
  AkIntersectionSwitching:
    type: object
    description: |-
      Eine Schaltung fasst mehrere Fahrspuren zusammen.
    properties:
      id:
        type: string
        description: ID aus Kreuzung und Zahl (K1-S1)
      name:
        type: string
      lanes:
        type: array
        items:
          $ref: '#/definitions/AkIntersectionLane'
  AkIntersectionLane:
    type: object
    description: |-
      Steuerung einer Fahrspur fÃ¼r eine oder mehrere Richtungen.
      Die Fahrspur kann mehrere Signale haben, an denen Fahrzeuge warten.
      FÃ¼r unsichtbare Ampeln kÃ¶nnen noch weitere Dinge genutzt werden:
      * Eine Immobilie, die die Signalstellung mit Achsen regelt
      * Einzelne Immobilien, die die einzelnen Signalbilder (rot, gelb, grÃ¼n) mittels Achsen anzeigen
    properties:
      id:
        type: string
        description: ID aus Kreuzung und Zahl (K1-L1)
      intersectionId:
        $ref: '#/definitions/AkIntersection/properties/id'
      name:
        type: string
        description: |-
          Name, ist frei verfÃ¼gbar. Empfehlungen:
          * N1, N2, S1, S2 (Norden 1, Norden 2, SÃ¼den 1, SÃ¼den 2, usw.)
      laneDirections:
        type: array
        description: |-
          Richtungen sind "left, right, straight"
        items:
          $ref: '#/definitions/AkDirection'
          minItems: 1
      laneTrafficType:
        description: FÃ¼r die Anzeige - FuÃgÃ¤nger, Trams oder normaler Verkehr
        $ref: '#/definitions/AkTrafficType'
      laneSwitching:
        description: |-
          Wie wird die Fahrspur geschaltet:
          * normal
          * nur auf Anfrage (erlaubt die Schaltung von Lichtimmobilien mit der Anforderung)
          * fÃ¼r FuÃgÃ¤nger
        $ref: '#/definitions/AkLaneSwitchingType'
      trackType:
        $ref: '#/definitions/AkTrackType'
      roadListeners:
        type: array
        items:
          $ref: '#/definitions/AkEepTrack/properties/id'
      allowedRoutes:
        description: |-
          Liste der Routen, die diese Fahrspur schalten sollen.
          Wird nur verwendet, wenn die Fahrzeuge der Route mit Ampeln oder StraÃen gemessen werden.
          Wenn angegeben, dann werden alle anderen Routen ignoriert!
        type: array
        items:
          type: string
      lanePhase:
        $ref: '#/definitions/AkRoadSignalPhase'
      signals:
        description: |-
          Liste von Ampeln, die den Verkehr steuern. Sollte fÃ¼r jede Fahrspur eine Ampel sein.
          Es wird empfohlen ein unsichtbares Signal zu verwenden
        type: array
        items:
          $ref: '#/definitions/AkRoadSignal'
      decorativeSignals:
        description: Liste zusÃ¤tzlicher Ampeln. Diese dÃ¼rfen keinesfalls den Verkehr steuern.
        type: array
        items:
          $ref: '#/definitions/AkRoadSignal'
      decoraticeStructuresAxis:
        description: Liste von Ampeln, die ihre Signalstellung mittels Achsen anzeigen
        type: array
        items:
          $ref: '#/definitions/AkRoadSignalAxis'
      decorativeStructuresLight:
        description: Liste von Ampeln, die ihre Signalstellung mittels Achsen anzeigen - Steuerung Ã¼ber das Licht einzelner Immobilien.
        type: array
        items:
          $ref: '#/definitions/AkRoadSignalLights'
  AkRoadSignal:
    type: object
    description: Weist einem Signal ein Ampel-Modell zu. Dadurch sind die Ampelphasen bekannt.
    properties:
      signal:
        description: Ein EEP-Signal, welches diese Ampel reprÃ¤sentiert.
        $ref: '#/definitions/AkEepSignal/properties/id'
      signalType:
        description: Ein Ampel-Modell, welches die Positionen dieser Ampel kennt.
        $ref: '#/definitions/AkRoadSignalModel/properties/id'
  AkRoadSignalAxis:
    type: object
    properties:
      structureId:
        type: string
        description: ID der Immobilie, die mit Achsen gesteuert werden soll
      model:
        $ref: '#/definitions/AkRoadSignalAxisModel'
  AkRoadSignalLights:
    type: object
    properties:
      id:
        type: string
      structureIdRed:
        type: string
        description: ID der Immobilie deren Licht bei Rot angeht
      structureIdYellow:
        type: string
        description: ID der Immobilie deren Licht bei Gelb angeht
      structureIdGreen:
        type: string
        description: ID der Immobilie deren Licht bei Gruen angeht
      structureIdRequest:
        type: string
        description: ID der Immobilie deren Licht bei Anforderungen angeht
  AkRoadSignalModel:
    type: object
    description: Modell fÃ¼r eine Ampel in EEP - Kennt die Positionen fÃ¼r die jeweilige Stellung
    properties:
      id:
        description: Name des Modells
        type: string
      name:
        description: Name des Modells
        type: string
      positionRed:
        description: |-
          Position: Rot
        type: integer
      positionGreen:
        description: |-
          Position: GrÃ¼n
        type: integer
      positionYellow:
        description: |-
          Position: Gelb
        type: integer
      positionRedYellow:
        description: |-
          Position: Rot-Gelb
        type: integer
      positionPedestrians:
        description: |-
          Position: FussgÃ¤ngerampel grÃ¼n
        type: integer
      positionOff:
        description: |-
          Position: Ausgeschaltet komplett
        type: integer
      positionOffBlinking:
        description: |-
          Position: Ausgeschaltet (blinkt gelb)
        type: integer
  AkRoadSignalAxisModel:
    type: object
    description: Modell fÃ¼r eine Ampel in EEP - Kennt die Positionen fÃ¼r die jeweilige Stellung
    properties:
      id:
        description: Name des Modells
        type: string
      name:
        description: Name des Modells
        type: string
      axisName:
        description: Name der zu steuernden Achse
        type: string
      positionRed:
        description: Achs-Position - Rot
        type: integer
      positionGreen:
        description: Achs-Position - GrÃ¼n
        type: integer
      positionYellow:
        description: Achs-Position - Gelb
        type: integer
      positionRedYellow:
        description: Achs-Position - Rot-Gelb
        type: integer
      positionPedestrians:
        description: Achs-Position - FussgÃ¤ngerampel grÃ¼n
        type: integer
      positionOff:
        description: Achs-Position - Ausgeschaltet komplett
        type: integer
      positionOffBlinking:
        description: Achs-Position - Ausgeschaltet (blinkt gelb)
        type: integer
  AkEepVersion:
    type: object
    properties:
      versionNumber:
        type: number
        example:
          14.1
  AkEepTime:
    type: object
    properties:
      timeComplete:
        type: string
      timeH:
        type: number
      timeM:
        type: number
      timeS:
        type: number
  AkEepSignal:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Nummer des Signals in der Anlage
      position:
        type: integer
        format: int64
        description: Signalstellung
      waitingTrainsCount:
        type: number
      waitingTrains:
        type: object
        additionalProperties:
          $ref: '#/definitions/AkEepTrain'
  AkEepTrain:
    type: object
    properties:
      name:
        type: string
        description: Name des Zuges wie in EEP
      rollingStock:
        type: object
        additionalProperties:
          $ref: '#/definitions/AkEepRollingStock'
  AkEepRollingStock:
    type: object
    properties:
      name:
        type: string
        description: Name des Rollmaterials wie in EEP
      trainName:
        type: integer
        format: int64
        description: Position des Rollmaterials im Zug
      positionInTrain:
        type: integer
        format: int64
        description: Position des Rollmaterials im Zug
      couplingFront:
        type: boolean
        description: Vordere Kupplung geschlossen
      couplingRear:
        type: boolean
        description: Hintere Kupplung geschlossen
      length:
        type: integer
        format: int64
        description: LÃ¤nge des Fahrzeugs (ab EEP 15, vorher 0)
      trackId:
        type: integer
        format: int64
        description: Auf welchem Gleisobject steht das Fahrzeug. (ab EEP 15, vorher -1)
      trackDistance:
        type: integer
        format: int64
        description: Wie weit ist das Fahrzeug vom Anfang des Gleisobjekts entfernt (ab EEP 15, vorher -1)
      trackDirection:
        type: integer
        format: int64
        description: In welche Richtung steht das Fahrzeug (ab EEP 15, vorher -1)
      trackSystem:
        type: integer
        format: int64
        description: Typ des Gleissystems (ab EEP 15, vorher -1)
      modelType:
        type: integer
        format: int64
        description: Modelltyp (ab EEP 15, vorher -1)
  AkEepTrackType:
    type: string
    enum:
      - road
      - tram
      - rail
      - auxiliary
      - control
  AkEepTrack:
    type: object
    properties:
      id:
        type: number
        description: ID des Gleisabschnitts in EEP
      trackType:
        $ref: '#/definitions/AkEepTrackType'
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Andreas Kreuz
  url: 'http://andreas-kreuz.github.io'
